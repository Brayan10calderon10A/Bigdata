# -*- coding: utf-8 -*-
"""Gran_encuenta_de_hogares.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eqmmPFFpi27swIuWqkFKg8AByRb9irJ8
"""

#!pip install pyspark

import pyspark
from pyspark import SparkContext
from pyspark.sql import SparkSession, SQLContext

import pandas as pd
import warnings

from pyspark.sql.functions import when, col, max, countDistinct, count, avg
import pyspark.sql.functions as F
from pyspark.sql.functions import udf
from pyspark.sql.types import ArrayType, StringType,IntegerType, StructType, StructField

pd.set_option("display.max_columns", None)
warnings.filterwarnings("ignore")

spark = SparkSession.builder.appName("Hogares").getOrCreate()

access_key = '***********'
secret_key = '**********'

# Configurar las credenciales si no se han configurado previamente
spark.sparkContext._jsc.hadoopConfiguration().set("fs.s3a.access.key", access_key)
spark.sparkContext._jsc.hadoopConfiguration().set("fs.s3a.secret.key", secret_key)

bucket_origen = 'bigdata10909'
bucket_destino = 'archivos-curados'

ruta_origen = 's3a://{}/personas_2_1.csv'.format(bucket_origen)

encuesta = spark.sparkContext.textFile(ruta_origen)

#encuesta = spark.sparkContext.textFile("/content/personas_2_1.csv")

encuesta2 = encuesta.map(lambda x: x.split(";"))

def reemplazar_elementos_licencia(campo):
    # Reemplaza ciertos elementos en el campo por '7'
    # Devuelve el campo modificado
    # Aquí se reemplazan múltiples cadenas en el campo con '7'
  if ("3,4" in campo) or ("2,3" in campo) or ("2,3,4" in campo) or ("2,3,5" in campo) or ("2,4" in campo) or ("2,5" in campo) or ("2,5,6" in campo) or ("3,4,5" in campo) or ("3,4,6" in campo) or ("3,5" in campo) or ("3,6" in campo) or ("4,5" in campo) or ("2,7" in campo) or ("7,5" in campo) or ("7,6" in campo):
    return campo.replace("3,4", "7").replace("2,3", "7").replace("2,3,4", "7").replace("2,3,5", "7").replace("2,4", "7").replace("2,5", "7").replace("2,5,6", "7").replace("3,4,5", "7").replace("3,4,6", "7").replace("3,5", "7").replace("3,6","7").replace("4,5", "7").replace("2,7", "7").replace("7,5", "7").replace("7,6", "7")
  return campo

def reemplazar_elemento_actividad(campo):
    # Reemplaza ciertos elementos en el campo por 'H'
    # Devuelve el campo modificado
    # Aquí se reemplazan múltiples cadenas en el campo con 'H'
  if ("A,B" in campo) or("A,B,C" in campo) or("A,B,C,D" in campo) or("A,B,D" in campo) or("A,B,G" in campo) or("A,C" in campo) or("A,C,D" in campo) or("A,D" in campo) or("A,E" in campo) or("A,G" in campo) or("B,C" in campo) or("B,C,D" in campo) or("B,C,D,G" in campo) or("B,D" in campo) or("B,D,F" in campo) or("B,E" in campo) or("B,F" in campo) or("B,G" in campo) or("C,D" in campo) or("C,F" in campo) or("C,G" in campo) or("D,E" in campo) or("D,F" in campo) or("D,G" in campo) or("F,G" in campo) or ("H,D" in campo)or ("H,H" in campo)or ("H,C" in campo)or ("H,G" in campo)or ("H,F" in campo):
    return campo.replace("A,B", "H").replace("A,B,C", "H").replace("A,B,C,D", "H").replace("A,B,D", "H").replace("A,B,G", "H").replace("A,C", "H").replace("A,C,D", "H").replace("A,D", "H").replace("A,E", "H").replace("A,G", "H").replace("B,C", "H").replace("B,C,D", "H").replace("B,C,D,G", "H").replace("B,D", "H").replace("B,D,F", "H").replace("B,E", "H").replace("B,F", "H").replace("B,G", "H").replace("C,D", "H").replace("C,F", "H").replace("C,G", "H").replace("D,E", "H").replace("D,F", "H").replace("D,G", "H").replace("F,G", "H").replace("H,D", "H").replace("H,H", "H").replace("H,C", "H").replace("H,G", "H").replace("H,F", "H")
  return campo

def reemplazar_no_usa(campo):
  if ("A,B" in campo) or ("A,C" in campo) or ("A,D" in campo) or ("A,E" in campo) or ("A,F" in campo) or ("A,G" in campo) or ("A,H" in campo) or ("B,A" in campo) or ("B,C" in campo) or ("B,D" in campo) or ("B,E" in campo) or ("B,F" in campo) or ("B,G" in campo) or ("B,H" in campo) or ("C,A" in campo) or ("C,B" in campo) or ("C,D" in campo) or ("C,E" in campo) or ("C,F" in campo) or ("C,G" in campo) or ("C,H" in campo) or ("D,A" in campo) or ("D,E" in campo) or ("D,F" in campo) or ("D,G" in campo) or ("D,H" in campo) or ("E,A" in campo) or ("E,B" in campo) or ("E,F" in campo) or ("E,G" in campo) or ("E,H" in campo) or ("F,A" in campo) or ("F,B" in campo) or ("F,G" in campo) or ("F,H" in campo) or ("G,A" in campo) or ("G,B" in campo) or ("G,H" in campo) or ("H,G" in campo):
    return campo.replace("A,B", "J").replace("A,C", "J").replace("A,D", "J").replace("A,E", "J").replace("A,F", "J").replace("A,G", "J").replace("A,H", "J").replace("B,A", "J").replace("B,C", "J").replace("B,D", "J").replace("B,E", "J").replace("B,F", "J").replace("B,G", "J").replace("B,H", "J").replace("C,A", "J").replace("C,B", "J").replace("C,D", "J").replace("C,E", "J").replace("C,F", "J").replace("C,G", "J").replace("C,H", "J").replace("D,A", "J").replace("D,E", "J").replace("D,F", "J").replace("D,G", "J").replace("D,H", "J").replace("E,A", "J").replace("E,B", "J").replace("E,F", "J").replace("E,G", "J").replace("E,H", "J").replace("F,A", "J").replace("F,B", "J").replace("F,G", "J").replace("F,H", "J").replace("G,A", "J").replace("G,B", "J").replace("G,H", "J").replace("H,G", "J")
  return campo

def reemplazar_discapacidad(campo):
  if("A,B" in campo) or ("A,B,D" in campo) or ("A,H" in campo) or ("A,I" in campo) or ("B,C" in campo) or ("B,E,H" in campo) or ("B,H" in campo) or ("C,D,E" in campo) or ("C,E,I" in campo) or ("C,I" in campo) or ("D,E" in campo) or ("D,E,H" in campo) or ("D,F" in campo) or ("D,H" in campo) or ("D,H,I" in campo) or ("D,I" in campo) or ("E,H" in campo) or ("E,I" in campo) or ("F,H" in campo) or ("F,I" in campo) or ("H,I" in campo) or ("L,I" in campo) or ("L,H" in campo) or ("L,D" in campo):
    return campo.replace("A,B" , "L").replace("A,B,D", "L").replace("A,H" , "L").replace("A,I" , "L").replace("B,C" , "L").replace("B,E,H", "L").replace("B,H" , "L").replace("C,D,E", "L").replace("C,E,I", "L").replace("C,I" , "L").replace("D,E" , "L").replace("D,E,H", "L").replace("D,F" , "L").replace("D,H" , "L").replace("D,H,I", "L").replace("D,I" , "L").replace("E,H" , "L").replace("E,I" , "L").replace("F,H" , "L").replace("F,I" , "L").replace("H,I" , "L").replace("L,I", "L").replace("L,H", "L").replace("L,D", "L")
  return campo

# La función convertir_letras_a_numeros convierte las letras en las filas del RDD a números según un diccionario predefinido.
# Crea un diccionario con letras del alfabeto como llaves y números como valores en orden ascendente.
# Luego, mapea las filas del RDD y reemplaza las letras por los números según el diccionario.

# Supongamos que el RDD se llama encuesta2

encuensta2 = encuesta2.map(lambda x: (x[0],x[1],x[2],x[3],x[4],x[5],reemplazar_elementos_licencia(x[6]),x[7],x[8],x[9],x[10],reemplazar_elemento_actividad(x[11]),x[12],x[13],x[14],x[15],x[16],x[17],x[18],x[19],x[20],x[21],x[22],x[23],x[24],reemplazar_no_usa(x[25]),reemplazar_discapacidad(x[26]),x[27],x[28],x[29],x[30],x[31],x[32],x[33],x[34],x[35],x[36],x[37],x[38]))

import string

# Alfabeto en minúsculas
letras = string.ascii_lowercase.upper()

# Generar el diccionario con letras como llaves y números como valores en orden ascendente
diccionario_letras_numeros = {letra: idx + 1 for idx, letra in enumerate(letras)}

def convertir_letras_a_numeros(row):
    columnas_convertidas = tuple(diccionario_letras_numeros.get(valor, valor) for valor in row)
    return columnas_convertidas

encuensta2 = encuensta2.map(convertir_letras_a_numeros)

num_filas = encuensta2.count()

# Obtener el número de columnas
num_columnas = len(encuensta2.first())

# Calcular el porcentaje de valores nulos y vacíos por columna
porcentaje_nulos_vacios_por_columna = encuensta2.flatMap(lambda row: [(i, 1 if val is None else 0, 1 if val == '' else 0) for i, val in enumerate(row)]) \
                                            .map(lambda x: (x[0], (x[1], x[2]))) \
                                            .reduceByKey(lambda a, b: (a[0] + b[0], a[1] + b[1])) \
                                            .mapValues(lambda x: (x[0] / num_filas * 100, x[1] / num_filas * 100)) \
                                            .collect()

# Mostrar el porcentaje de nulos y vacíos por columna
for columna, (porcentaje_nulos, porcentaje_vacios) in porcentaje_nulos_vacios_por_columna:
    print(f"Columna {columna}: Porcentaje de nulos: {porcentaje_nulos}%, Porcentaje de vacíos: {porcentaje_vacios}%")

datos = encuensta2.map(lambda x: (x[2],x[4],x[6],x[8],x[10],x[24],x[26],x[28],x[30],x[32],x[38],x[1],x[3],x[5],x[7],x[9],x[11],x[21],x[25],x[27],x[29],x[31],x[33]))

header = datos.first()
datos_sin_header = datos.filter(lambda row: row != header)

schema = StructType([StructField(header_, StringType(), True) for header_ in header])

frame = spark.createDataFrame(datos_sin_header, schema)
#frame.show()

ruta_destino = 's3a://{}/personas.csv'.format(bucket_destino)
frame.write.csv(ruta_destino)